import { TikTokLoginBot } from './src/main';

/**
 * Demo: CAPTCHA handling trong th·ª±c t·∫ø
 */
async function demoCaptchaHandling(): Promise<void> {
  console.log('üé¨ Demo: CAPTCHA handling system');
  console.log('================================');
  
  const bot = new TikTokLoginBot();
  
  try {
    await bot.init();
    
    // Th√™m c√°c tasks demo
    bot.addAutomationTask('Navigate to TikTok', async () => {
      console.log('üåê Navigating to TikTok...');
      await bot.navigateToTikTok();
      return 'Navigation completed';
    });
    
    bot.addAutomationTask('Click Login Button', async () => {
      console.log('üîë Clicking login button...');
      // Simulate login button click
      await new Promise(resolve => setTimeout(resolve, 1000));
      return 'Login button clicked';
    });
    
    bot.addAutomationTask('Fill Login Form', async () => {
      console.log('üìù Filling login form...');
      // Simulate form filling
      await new Promise(resolve => setTimeout(resolve, 2000));
      return 'Form filled';
    });
    
    bot.addAutomationTask('Submit Login', async () => {
      console.log('üöÄ Submitting login...');
      // Simulate form submission
      await new Promise(resolve => setTimeout(resolve, 1500));
      return 'Login submitted';
    });
    
    // B·∫Øt ƒë·∫ßu CAPTCHA monitoring
    await bot.startCaptchaMonitoring();
    
    console.log('\nüìä Automation Status:');
    console.log(bot.getAutomationStatus());
    
    console.log('\nüöÄ Starting automation...');
    console.log('üí° Trong th·ª±c t·∫ø, n·∫øu c√≥ CAPTCHA xu·∫•t hi·ªán:');
    console.log('   1. Bot s·∫Ω t·ª± ƒë·ªông pause');
    console.log('   2. T·∫°o file captcha-instructions.json');
    console.log('   3. Ch·ªù human gi·∫£i CAPTCHA');
    console.log('   4. T·ª± ƒë·ªông resume khi gi·∫£i xong');
    
    // Ch·∫°y automation (trong demo n√†y s·∫Ω kh√¥ng c√≥ CAPTCHA th·∫≠t)
    await bot.automationSystem.startExecution();
    
    console.log('\n‚úÖ Demo completed!');
    
  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  } finally {
    await bot.close();
  }
}

/**
 * Demo: Manual CAPTCHA simulation
 */
async function demoManualCaptcha(): Promise<void> {
  console.log('üé≠ Demo: Manual CAPTCHA simulation');
  console.log('==================================');
  
  const bot = new TikTokLoginBot();
  
  try {
    await bot.init();
    
    // Th√™m task s·∫Ω trigger CAPTCHA
    bot.addAutomationTask('Trigger CAPTCHA', async () => {
      console.log('üö® Simulating CAPTCHA detection...');
      
      // Simulate CAPTCHA detection
      const mockCaptchaInfo = {
        isPresent: true,
        type: 'slider' as const,
        selectors: ['.cap-flex'],
        timestamp: new Date().toISOString(),
        url: 'https://www.tiktok.com/login'
      };
      
      // Trigger CAPTCHA callback manually
      if (bot['captchaDetector']) {
        bot['captchaDetector']['handleCaptchaDetected'](mockCaptchaInfo);
      }
      
      return 'CAPTCHA triggered';
    });
    
    // Start monitoring
    await bot.startCaptchaMonitoring();
    
    console.log('üîç CAPTCHA monitoring started');
    console.log('‚è≥ Starting automation...');
    
    // Start automation
    await bot.automationSystem.startExecution();
    
  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  } finally {
    await bot.close();
  }
}

// Main demo function
async function main(): Promise<void> {
  const demoType = process.argv[2];
  
  switch (demoType) {
    case 'basic':
      await demoCaptchaHandling();
      break;
    case 'manual':
      await demoManualCaptcha();
      break;
    default:
      console.log('üé¨ Available demos:');
      console.log('  npm run demo:basic   - Basic CAPTCHA handling demo');
      console.log('  npm run demo:manual  - Manual CAPTCHA simulation');
      break;
  }
}

// Run demo
if (require.main === module) {
  main().catch(console.error);
}
